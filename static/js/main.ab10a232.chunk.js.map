{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","jsonbin","JSONbin","useState","edit","value","input","setInput","inputRef","useRef","useEffect","current","focus","handleChange","e","target","handleUpdateSubmit","preventDefault","onSubmit","text","handleSubmit","a","data","create","id","console","log","error","message","className","Grid","container","direction","spacing","alignItems","item","TextField","ref","variant","label","onChange","Button","onClick","startIcon","color","useStyles","makeStyles","theme","root","width","maxWidth","backgroundColor","palette","background","paper","Todo","todos","removeTodo","updateTodo","classes","setEdit","length","style","height","justify","size","map","todo","index","List","key","ListItem","role","undefined","dense","button","ListItemText","primary","ListItemSecondaryAction","IconButton","edge","aria-label","req","XMLHttpRequest","open","setRequestHeader","send","TodoList","setTodos","response","onreadystatechange","readyState","DONE","JSON","parse","responseText","ids","records","read","addTodo","getData","window","location","reload","test","push","darkmode","SetDarkmode","createMuiTheme","type","ThemeProvider","Paper","marginTop","padding","xs","Switch","checked","Typography","paddingTop","removedArr","filter","delete","msg","todoId","newValue","update","version","prev","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ab10a232.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { Button, TextField, Grid } from '@material-ui/core';\r\nimport AddRoundedIcon from '@material-ui/icons/AddRounded';\r\nimport JSONbin from '../../node_modules/jsonbin-io.js/src/jsonbin-io.js';\r\n\r\n\r\nfunction TodoForm(props) {\r\n  const jsonbin = new JSONbin('$2b$10$h8/yUbhnIsOQsM0NOsHR4OKqt/Nd0kPqs4AgcvtcJ2yy7fqwxSami');\r\n\r\n  const [input, setInput] = useState(props.edit ? props.edit.value : '');\r\n\r\n  const inputRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    inputRef.current.focus();\r\n  });\r\n\r\n  const handleChange = e => {\r\n    setInput(e.target.value);\r\n  };\r\n\r\n  const handleUpdateSubmit = e => {\r\n    e.preventDefault();\r\n    props.onSubmit({\r\n      text: input\r\n    });\r\n    setInput('');     \r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    (async () => {\r\n      const data = {text: input};\r\n      try {\r\n        const id = await jsonbin.create(data, '5f56aa8c993a2e110d407fef', input);\r\n        console.log(id);\r\n        props.onSubmit({\r\n          id: id,\r\n          text: input\r\n        });\r\n      \r\n        setInput(''); \r\n      }\r\n      catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    })();\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={props.edit ? handleUpdateSubmit : handleSubmit} className='todo-form'>\r\n      {props.edit ? (\r\n        <>\r\n        <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\r\n         <Grid item>\r\n        <TextField\r\n         ref={inputRef}\r\n        className=\"input\"\r\n        value={input}\r\n        variant=\"standard\"\r\n        label=\"Update you task\"\r\n        onChange={handleChange} \r\n        />\r\n        </Grid>\r\n        <Grid item>\r\n        <Button onClick={handleUpdateSubmit} startIcon={<AddRoundedIcon />} variant=\"contained\" color=\"default\">\r\n      Update your task\r\n      </Button>\r\n      </Grid>\r\n      </Grid>\r\n        </>\r\n      ) : (\r\n        <>\r\n        <Grid container direction=\"row\" spacing={2} alignItems=\"center\">\r\n         <Grid item>\r\n         <TextField\r\n         ref={inputRef}\r\n        className=\"input\"\r\n        value={input}\r\n        variant=\"standard\"\r\n        label=\"add a task\"\r\n        onChange={handleChange} \r\n        />\r\n        </Grid>\r\n        <Grid item>\r\n        <Button onClick={handleSubmit} startIcon={<AddRoundedIcon />} variant=\"contained\" color=\"default\">\r\n      Add a task\r\n      </Button>\r\n      </Grid>\r\n      </Grid>\r\n      </>\r\n      )}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default TodoForm;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport TodoForm from './TodoForm';\r\nimport { Grid, makeStyles, List, ListItem, ListItemSecondaryAction, ListItemText, IconButton } from '@material-ui/core';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport { PacmanLoader\t}\t from \"react-spinners/\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n    maxWidth: 360,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nconst Todo = ({ todos, removeTodo, updateTodo }) => {\r\n\r\n  const classes = useStyles();\r\n\r\n  const [edit, setEdit] = useState({\r\n    id: null,\r\n    value: ''\r\n  });\r\n  \r\n\r\n  const submitUpdate = value => {\r\n    updateTodo(edit.id, value);\r\n    setEdit({\r\n      id: null,\r\n      value: ''\r\n    });\r\n  };\r\n\r\n\r\nif (edit.id) {\r\n  return <TodoForm edit={edit} onSubmit={submitUpdate} />; \r\n  }\r\n\r\n  if(todos.length <= 0 ){\r\n    return <Grid container direction=\"column\" style={{height:\"14vh\"}} justify=\"center\" alignItems=\"center\"> \r\n    <Grid item >\r\n    <PacmanLoader\t\t\r\n    size={20}\r\n    color={\"#f5c242\"}\r\n  />\r\n   </Grid>\r\n  </Grid>\r\n   }\r\n\r\n  return todos.map((todo, index) => (\r\n    <List key={index} className={classes.root}> \r\n          <ListItem key={index} role={undefined} dense button>\r\n            <ListItemText primary={todo.text} />\r\n            <ListItemSecondaryAction>\r\n            <IconButton onClick={() => setEdit({ id: todo.id, value: todo.text })} edge=\"end\" aria-label=\"comments\">\r\n                <EditIcon />\r\n              </IconButton>\r\n              <IconButton onClick={() => removeTodo(todo.id)} edge=\"end\" aria-label=\"comments\">\r\n                <DeleteIcon />\r\n              </IconButton>\r\n            </ListItemSecondaryAction>\r\n          </ListItem>\r\n          </List>\r\n        )\r\n      )\r\n};\r\n\r\nexport default Todo;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport { Switch, Typography, Grid, Paper } from '@material-ui/core';\r\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\r\nimport FlareRoundedIcon from '@material-ui/icons/FlareRounded';\r\nimport Brightness3Icon from '@material-ui/icons/Brightness3';\r\nimport JSONbin from '../../node_modules/jsonbin-io.js/src/jsonbin-io.js';\r\nimport TodoForm from './TodoForm';\r\nimport Todo from './Todo';\r\n\r\n\r\nconst jsonbin = new JSONbin('$2b$10$h8/yUbhnIsOQsM0NOsHR4OKqt/Nd0kPqs4AgcvtcJ2yy7fqwxSami');\r\nlet req = new XMLHttpRequest();\r\nreq.open(\"GET\", \"https://api.jsonbin.io/e/collection/5f56aa8c993a2e110d407fef/all-bins\", true);\r\nreq.setRequestHeader(\"secret-key\", \"$2b$10$h8/yUbhnIsOQsM0NOsHR4OKqt/Nd0kPqs4AgcvtcJ2yy7fqwxSami\");\r\nreq.send();\r\n    \r\n\r\nfunction TodoList() {\r\n  const [todos, setTodos] = useState([]);\r\n   \r\n\r\n  var response = [];\r\n  req.onreadystatechange = async (todo) => {\r\n  if (req.readyState === XMLHttpRequest.DONE) {\r\n    try{\r\n      response = await JSON.parse(req.responseText);\r\n        let ids = [...response.records];\r\n          console.log(ids);\r\n      const getData =  () => {\r\n        return ids.map( async({id})=>{\r\n            todo = {     \r\n            text :(await jsonbin.read(id,0)).text,\r\n            id : id,\r\n            }\r\n          addTodo(todo);   \r\n          })}\r\n          getData();\r\n    }\r\n      catch (err){\r\n       console.log(err.message);\r\n       window.location.reload();\r\n      }\r\n  }\r\n};\r\n\r\n\r\nconst addTodo = todo => {\r\n  if (!todo.text || /^\\s*$/.test(todo.text)) {\r\n    return;\r\n  }\r\n  todos.push(todo);\r\n  setTodos([...todos]);\r\n  console.log(todos);\r\n}; \r\n  \r\n  const updateTodo = (todoId, newValue) => {\r\n    if (!newValue.text || /^\\s*$/.test(newValue.text)) {\r\n      return;\r\n    }\r\n    (async () => {\r\n      try {\r\n        const version = await jsonbin.update(todoId, newValue, true);\r\n        console.log(version); //-> 1\r\n      }\r\n      catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    })();\r\n    setTodos(prev => prev.map(item => (item.id === todoId ? newValue : item)));\r\n  };\r\n\r\n  const removeTodo = id => {\r\n    const removedArr = [...todos].filter(todo => todo.id !== id);\r\n    (async () => {\r\n      try {\r\n        const msg = await jsonbin.delete(id);\r\n        console.log(msg); \r\n      }\r\n      catch (err) {\r\n        console.error(err.message);\r\n      }\r\n    })();\r\n\r\n    setTodos(removedArr);\r\n  };\r\n\r\n  \r\n  \r\n  const [darkmode, SetDarkmode] = useState(false);\r\n\r\n  const theme = createMuiTheme({\r\n    palette:{\r\n      type: darkmode ? \"dark\" : \"light\",\r\n    },\r\n  });\r\n\r\n  return (\r\n      <Grid container direction=\"column\" alignItems=\"center\">\r\n        <Grid item container direction=\"row\" justify=\"center\" alignItems=\"center\">\r\n        <ThemeProvider theme={theme}>\r\n        <Paper style={{marginTop:\"120px\", padding:\"3vh\"}}>\r\n          <Grid item xs={12} container direction=\"row\" justify=\"flex-end\" alignItems=\"center\">  \r\n            <FlareRoundedIcon />  \r\n              <Switch checked={darkmode} onChange={() => SetDarkmode(!darkmode)} />\r\n            <Brightness3Icon />\r\n          </Grid>\r\n          <Grid item>  \r\n            <Typography variant=\"h3\">Todo app</Typography>\r\n          </Grid> \r\n          <Grid item> \r\n            <TodoForm onSubmit={addTodo} />\r\n          </Grid>\r\n          <Grid item style={{paddingTop:\"1vh\"}}>\r\n            <Todo\r\n              todos={todos}\r\n              removeTodo={removeTodo}\r\n              updateTodo={updateTodo}\r\n            />\r\n          </Grid>\r\n      </Paper>\r\n      </ThemeProvider>  \r\n      </Grid>\r\n    </Grid>\r\n    \r\n  );\r\n}\r\n\r\nexport default TodoList;\r\n\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <div className='todo-app'>\n      <TodoList />\n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}